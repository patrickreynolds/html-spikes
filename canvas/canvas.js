// Generated by CoffeeScript 1.8.0
var Canvas;

Canvas = Canvas || {};

(function($, Canvas) {
  var AnnotationColors, AnnotationSizes, AnnotationTools, Point, addClick, clear, clearImage, clearSelectedColors, loadImage, loadLayer, loadLayerInfo, markSelected, removeSelected, saveLayer, saveLayerInfo;
  $(function() {
    Canvas.bindEvents();
    Canvas.positionCanvas(Canvas.whiteboard.canvas);
    return Canvas.redraw(Canvas.whiteboard);
  });
  Canvas.bindEvents = function() {
    $(window).resize(function() {
      Canvas.positionCanvas(Canvas.whiteboard.canvas);
      return Canvas.redraw(Canvas.whiteboard);
    });
    $('#whiteboard').mousedown(function(ev) {
      var mouseX, mouseY;
      mouseX = ev.pageX - this.offsetLeft;
      mouseY = ev.pageY - this.offsetTop;
      Canvas.isPainting = true;
      addClick(ev.pageX - this.offsetLeft, ev.pageY - this.offsetTop);
      return Canvas.redraw(Canvas.whiteboard);
    });
    $('#whiteboard').mousemove(function(ev) {
      if (Canvas.isPainting) {
        addClick(ev.pageX - this.offsetLeft, ev.pageY - this.offsetTop, true);
        return Canvas.redraw(Canvas.whiteboard);
      }
    });
    $('#whiteboard').mouseup(function(ev) {
      return Canvas.isPainting = false;
    });
    $('#whiteboard').mouseleave(function(ev) {
      return Canvas.isPainting = false;
    });
    $('#clear').mouseup(function(ev) {
      return clear(Canvas.whiteboard);
    });
    $('.Control-color').mouseup(function(ev) {
      clearSelectedColors();
      markSelected(ev.target);
      return Canvas.currentColor = AnnotationColors[ev.target.id];
    });
    $('.Control-size').mouseup(function(ev) {
      return Canvas.currentSize = AnnotationSizes[ev.target.id];
    });
    $('.Control-tool').mouseup(function(ev) {
      return Canvas.currentTool = AnnotationTools[ev.target.id];
    });
    $('#load-image').mouseup(function(ev) {
      return loadImage();
    });
    $('#clear-image').mouseup(function(ev) {
      return clearImage();
    });
    $('#load-layer-info').mouseup(function(ev) {
      return loadLayerInfo();
    });
    $('#load-layer-confirm').mouseup(function(ev) {
      return loadLayer();
    });
    $('#save-layer-info').mouseup(function(ev) {
      return saveLayerInfo();
    });
    return $('#save-layer').mouseup(function(ev) {
      return saveLayer();
    });
  };
  Canvas.whiteboard = $('#whiteboard').get(0).getContext('2d');
  AnnotationColors = {
    black: "#212121",
    gray: "#CCCCCC",
    red: "#BA3D2D",
    green: "#8CBC30",
    blue: "#92B8BF"
  };
  AnnotationSizes = {
    small: 2,
    normal: 6,
    large: 12
  };
  AnnotationTools = {
    eraser: 'eraser',
    marker: 'marker'
  };
  Canvas.points = [];
  Canvas.currentColor = AnnotationColors.black;
  Canvas.currentSize = AnnotationSizes.normal;
  Canvas.currentTool = AnnotationTools.marker;
  Canvas.isPainting = null;
  Point = function() {
    var color, dragState, gpo, size, x, y;
    x = null;
    y = null;
    dragState = null;
    size = null;
    color = null;
    return gpo = null;
  };
  markSelected = function(el) {
    return $(el).addClass('is-selected');
  };
  removeSelected = function() {
    return $(this).removeClass('is-selected');
  };
  clearSelectedColors = function() {
    return $('.Control-color').each(removeSelected);
  };
  Canvas.positionCanvas = function(canvas) {
    canvas.style.height = '100%';
    canvas.style.width = '100%';
    canvas.width = canvas.offsetWidth;
    return canvas.height = canvas.offsetHeight;
  };
  addClick = function(x, y, dragging) {
    var point;
    point = new Point;
    point.x = x;
    point.y = y;
    point.dragState = dragging;
    point.size = Canvas.currentSize;
    if (Canvas.currentTool === "eraser") {
      point.color = 'rgb(0, 0, 0, 0)';
      point.gpo = 'destination-out';
    } else {
      point.color = Canvas.currentColor;
      point.gpo = 'source-over';
    }
    return Canvas.points.push(point);
  };
  Canvas.redraw = function(whiteboard) {
    var i, point, _i, _ref, _results;
    whiteboard.clearRect(0, 0, whiteboard.canvas.width, whiteboard.canvas.height);
    whiteboard.lineJoin = "round";
    if (Canvas.points.length) {
      _results = [];
      for (i = _i = 0, _ref = Canvas.points.length; _i < _ref; i = _i += 1) {
        whiteboard.beginPath();
        point = Canvas.points[i];
        if (point.dragState && i) {
          whiteboard.moveTo(Canvas.points[i - 1].x, Canvas.points[i - 1].y);
        } else {
          whiteboard.moveTo(point.x - 1, point.y);
        }
        whiteboard.lineTo(point.x, point.y);
        whiteboard.closePath();
        whiteboard.strokeStyle = point.color;
        whiteboard.lineWidth = point.size;
        whiteboard.globalCompositeOperation = point.gpo || 'source-over';
        _results.push(whiteboard.stroke());
      }
      return _results;
    }
  };
  loadImage = function(ev) {
    return $('.Canvas-container').css('background', 'url(' + 'adobe-xd.png' + ') center no-repeat');
  };
  clearImage = function(ev) {
    return $('.Canvas-container').css('background', 'none');
  };
  loadLayerInfo = function(ev) {
    var index, layer, _i, _ref, _results;
    $('.Layer-container-load').css('display', 'inline-block');
    $('#layer-list').find('select').empty();
    _results = [];
    for (index = _i = 0, _ref = localStorage.length; 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
      layer = localStorage.key(index);
      _results.push($('#layer-list').find('select').append(new Option(layer, layer)));
    }
    return _results;
  };
  loadLayer = function(ev) {
    var layer, layerPoints;
    $('.Layer-container-load').css('display', 'none');
    layer = $('#layer-list').find('select').val();
    layerPoints = localStorage.getItem(layer);
    Canvas.points = Canvas.points.concat(JSON.parse(layerPoints));
    return Canvas.redraw(Canvas.whiteboard);
  };
  saveLayerInfo = function(ev) {
    return $('.Layer-container-save').css('display', 'inline-block');
  };
  saveLayer = function(ev) {
    var layer, layerName;
    layerName = $('#layer-name').val().trim();
    layer = Canvas.points;
    if (layerName) {
      $('.Layer-container-save').css('display', 'none');
      localStorage.setItem(layerName, JSON.stringify(layer));
      return $('#layer-name').val('');
    } else {
      alert("No layer name!");
      return $('#layer-name').focus();
    }
  };
  return clear = function(whiteboard) {
    whiteboard.clearRect(0, 0, whiteboard.canvas.width, whiteboard.canvas.height);
    return Canvas.points = [];
  };
})(jQuery, Canvas);
